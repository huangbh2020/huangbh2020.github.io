[{"title":"线程池家族：threadPoolTaskExecutor的介绍","url":"/2025/06/25/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%B6%E6%97%8F%EF%BC%9AthreadPoolTaskExecutor/","content":"让我用最简单的方式解释这两种线程池的区别：\n比喻版解释想象你开了一家快递公司：\n\nThreadPoolExecutor 就像基础款快递站，只负责快递员(线程)管理\nThreadPoolTaskExecutor 是升级版快递站，在管理快递员的基础上还加了自动统计(监控)、智能排班(任务调度)等功能\n\n具体区别\n\n\n特点\nThreadPoolExecutor\nThreadPoolTaskExecutor\n\n\n\n所属框架\nJDK原生\nSpring框架\n\n\n主要用途\n通用Java线程池\nSpring应用中的异步任务处理\n\n\n与Spring整合\n需要手动配置\n天然支持Spring的@Async注解\n\n\n监控能力\n基本无\n提供任务排队数量等监控指标\n\n\n功能扩展\n原始功能\n增加了任务装饰、异常处理等扩展点\n\n\n使用场景\n普通Java应用\nSpring Boot&#x2F;Cloud应用\n\n\n举个实际例子假设你要处理1000个订单：\n用ThreadPoolExecutor：\n// 需要自己创建和管理ExecutorService executor = new ThreadPoolExecutor(...);executor.execute(new OrderTask());\n\n用ThreadPoolTaskExecutor：\n// 在Spring中声明bean即可@Beanpublic TaskExecutor taskExecutor() &#123;    return new ThreadPoolTaskExecutor();&#125;// 使用时直接加注解@Asyncpublic void processOrder(Order order) &#123;    // 处理逻辑&#125;\n\n什么时候用哪个？\n如果你是纯Java项目 → 选ThreadPoolExecutor\n如果你是Spring项目特别是要用@Async → 选ThreadPoolTaskExecutor\n需要监控线程池状态 → ThreadPoolTaskExecutor更方便\n\n简单总结：ThreadPoolTaskExecutor是Spring对JDK线程池的”豪华装修版”，在Spring生态中用起来更顺手。\n","categories":["java"],"tags":["java","线程池"]},{"title":"还在为写注释烦恼？这款AI插件能帮你写JavaDoc注释","url":"/2025/06/25/%E8%BF%98%E5%9C%A8%E4%B8%BA%E5%86%99%E6%B3%A8%E9%87%8A%E7%83%A6%E6%81%BC%EF%BC%9F%E8%BF%99%E6%AC%BEAI%E6%8F%92%E4%BB%B6%E8%83%BD%E5%B8%AE%E4%BD%A0%E6%8A%8AJavaDoc%E5%AE%89%E6%8E%92%E5%BE%97%E6%98%8E%E6%98%8E%E7%99%BD%E7%99%BD/","content":"大家好，我又来折腾了。还是我，那个沉迷于用代码解决代码问题的全栈小弟。\n自从上次做了“命名神器”插件后，我写代码的幸福感确实提升了不少。但作为一个开发者，我们的“痛点”就像野草，割了一茬又长一茬。这不，最近我又被一个新的问题给缠上了——写代码注释。\n说起注释，我们对它真是又爱又恨。\n\n爱它：因为一份好的注释，能在几个月后拯救那个对着自己代码一脸懵逼的你，也能让接手你代码的同事对你心存感激。\n恨它：因为写注释真的好麻烦！特别是写完一个复杂的方法后，那种大脑被掏空的感觉，实在不想再耗费心力去组织语言描述它。\n\n市面上其实也有一些注释生成工具，我自己也用过。但用下来总感觉差点意思。它们大多是基于“翻译”的逻辑，简单地把你的方法名翻译成中文。\n这就导致一个很尴尬的问题：如果你的方法命名本身就不太规范，那生成的注释基本就等于废话。\n比如我写了个方法叫 process(List dataList)，一个翻译工具可能会生成注释：&#x2F;&#x2F; 处理数据列表。\n这……说了跟没说一样啊！天知道我这个 process 方法里是过滤、是排序、还是做了什么复杂的业务聚合。\n我寻思着，现在大模型（LLM）的能力这么强，它连考试写论文都能搞定，难道还“读不懂”我区区一个方法吗？工具应该是“理解”我的代码，而不是简单地“翻译”我的方法名。\n于是，肝了几个晚上，我为我的那个小小的IDEA插件，增加了一个我自己超爱用的新功能：\n\nAI 智能注释！\n它的使用方式，我设计得极其简单粗暴：\n\n把你的光标，放在需要生成注释的方法里的任何一个地方。你没看错，是方法体里的任何地方，不需要选中，不需要思考。\n轻轻按下快捷键：**Alt + M**（如果快捷键不行，可以修改其他的自己方便的快捷键）\n稍等片刻（大概一两秒，等待期间不用停留在页面等待，完成后会自动替换或者插入注释，速度取决于你的网络和选择的模型）。\n\n然后，见证奇迹的时刻就到了。一段由AI“读懂”你代码后，为你量身定做的注释，就会自动出现在方法的上方。\n我们还拿刚才那个 process 方法举例。哪怕你的方法名写得再随意，只要你的代码逻辑是清晰的，AI就能看懂。\n【你的代码】\nJava\npublic List&lt;String&gt; process(List&lt;User&gt; userList) &#123;\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    for (User user : userList) &#123;\n        if (user.isActive() &amp;&amp; user.getAge() &gt; 18) &#123;\n            result.add(user.getEmail());\n        &#125;\n    &#125;\n    return result;\n&#125;\n\n【按下 Alt + M 后】\nJava\n/**\n * 从用户列表中筛选出状态为活跃且年龄大于18岁的用户，并返回他们的邮箱地址列表。\n *\n * @param userList 用户对象列表\n * @return 符合条件的用户的邮箱地址列表\n */\npublic List&lt;String&gt; process(List&lt;User&gt; userList) &#123;\n    // ... 方法体 ...\n&#125;\n\n看到没！它直接看懂了你的代码逻辑，而不是管你那个叫 process 还是 handle 的烂名字。这才是真正的智能，这才是我们想要的工具！\n当然，考虑到大家对注释的详细程度有不同偏好，我在插件的设置页面里，也提供了两种模式供你选择：\n\n简单模式：成标准的 Javadoc 风格注释，包含对参数(@param)和返回值(@return)的简单说明。\n\n详细模式：生成标准的 Javadoc 风格注释，包含对参数(@param)和返回值(@return)的详细说明，非常适合写库或者重要接口。\n同时支持智普ai的多种模型，不同的模型速度和效果都有差异，可以在智普的开放平台，申请好apikey,进行使用，如果不想申请，可以使用作者的apikey,但是速度比较慢，建议还是自行申请。\n\n\n\n这个功能，我自己现在已经用得停不下来了。每次写完一个方法，顺手按一下 Alt+M，已经成了一种肌肉记忆。\n如果你已经安装了我的插件，直接更新到最新版即可体验。\n如果还没尝试过的朋友，欢迎在 IDEA 插件市场搜索 “Easy Naming” (对，还是那个命名神器，现在它更强大了) 下载使用。\n希望这个小功能，能再次为你节省一点点宝贵的时间和脑力，让我们能更专注于创造本身。\n—— 一个持续为开发者幸福感而折腾的全栈小弟\n","categories":["IDEA插件"],"tags":["IDEA插件","变量命名"]},{"title":"git分支新建删除","url":"/2025/06/25/git%E5%88%86%E6%94%AF%E6%96%B0%E5%BB%BA%E5%88%A0%E9%99%A4/","content":"\n查看当前的分支，星号标识为当前分支；\n\ngit branch\n\n2、切换分支\n#切换到master分支git checkout master\n\n3、合并分支\n#切换到master分支之后执行，把dev分支合并到master分支git dev\n\n4、推送分支\ngit push\n\n5、删除本地分支\n#删除本地dev分支git branch -d dev\n\n6、删除远程分支\n#删除远程dev分支git push origin --delete dev\n\n7、新建分支\n#新建dev-new分支git branch dev-new#把分支推送到远程git push origin dev-new  或者 git push origin dev-new1\n\n","categories":["git"],"tags":["git"]},{"title":"关于我为什么要建一个变量命名网站","url":"/2025/05/20/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%BD%91%E7%AB%99/","content":"为什么我要建一个变量命名网站？在日常开发过程中，变量命名一直是困扰无数程序员的难题。一个好的变量名不仅能提升代码的可读性，还能让团队协作更加顺畅。然而，现实中我们经常会遇到“不会命名”的尴尬时刻。为了解决这个问题，我尝试过市面上各种变量命名工具，但总觉得不尽如人意。\n有些工具生成的变量名不够语义化，难以直接应用到实际项目中；有些则只是简单地将中文直译成英文，缺乏上下文和行业语境的理解。这样的命名方式，往往无法满足我们对高质量代码的追求。\n随着AI技术的飞速发展，尤其是大模型的普及，变量命名这件“小事”其实已经可以用智能化的方式来解决。现在大模型的能力越来越强，调用成本也不高，为什么不自己做一个更懂程序员、更贴合实际需求的变量命名网站呢？\n更巧的是，最近Spring AI正式发布了1.0.0版本，这为Java开发者带来了新的希望。作为一名Java Boy，我当然不能错过这个机会。于是，我决定动手开发一个基于AI、专为程序员量身打造的变量命名网站。\n这个网站的目标很简单：  \n\n提供智能、语义化的变量命名建议  \n支持多种编程语言和场景  \n结合大模型的理解能力，生成更贴合实际业务的命名  \n让每一位程序员都能轻松写出高质量、易维护的代码\n\n技术选型：为什么是 Spring AI？有了想法，下一步就是动手实现。作为一名忠实的 Java Boy，技术栈的选择几乎是印在DNA里的：Spring Boot 必是基石。而这次，有了 Spring AI 的加持，整个开发过程变得前所未有的顺滑。\n选择 Spring AI，主要有以下几个原因：\n\n无缝的生态集成：Spring AI 就像是 Spring 全家桶里的一块新拼图，它与我们熟悉的 Spring Boot、Spring MVC 等框架完美融合。没有陡峭的学习曲线，不需要引入复杂的第三方库，只需要几个简单的注解和配置，就能让我的应用拥有强大的AI能力。\n优雅的抽象与可移植性：Spring AI 提供了统一的 ChatClient 和 EmbeddingClient 接口。这意味着，我的后端服务可以轻松地在不同的AI模型提供商之间切换，比如 OpenAI、Azure OpenAI、Ollama，以及通过社区支持的智普AI等。这种“一次编码，随处运行”的理念，让我的小项目未来充满了无限可能，不用担心被某个大模型厂商“绑架”。\n极简的开发体验：在没有 Spring AI 之前，要调用一个大模型，我需要自己处理 HTTP 请求、JSON 解析、API 密钥管理等一堆繁琐的杂事。而现在，我只需要注入一个 ChatClient Bean，然后调用一个方法，就能像调用本地 Service 一样简单地与AI对话。它让我能更专注于核心业务逻辑——如何通过精妙的提示词（Prompt）工程，让AI生成最符合我们开发习惯的变量名。\n\n从想法到现实：核心功能与亮点在 Spring AI 的助力下，我很快就将想法变成了现实。这个变量命名网站，不仅仅是一个“翻译工具”，我更希望它是一个能“理解”你的编程伙伴。它具备以下核心功能：\n\n智能上下文理解：你不再需要只输入“用户列表”这样的简单词汇。你可以尝试输入更完整的业务场景，比如：&lt;br&gt;“根据用户ID列表批量查询已激活的用户信息”&lt;br&gt;AI会理解其中的动词、名词和限定条件，为你生成 activeUsersByIds 或 findActiveUsersByIdList 这样更具描述性的命名。\n\n多种命名风格支持：无论你是前端还是后端，都能找到你的最爱。网站支持小驼峰（camelCase）、大驼峰（PascalCase）、下划线（snake_case）和中划线（kebab-case）等多种主流命名风格一键切换。\n\n主流模型自由切换：考虑到不同AI模型的“性格”各异，我还在网站中加入了模型选择功能。你可以根据自己的喜好，在 DeepSeek 和 智普AI 等不同模型间自由切换，找到那个最懂你的“AI命名搭子”。\n\n代码注释与方法命名：除了变量命名，我还加入了更实用的功能。你可以将整个方法体贴进去，让AI帮你生成完整的方法名和规范的Javadoc注释，真正将你从文档工作中解放出来。\n\n\n未来展望与诚挚邀请这个小小的网站，是我作为一名普通开发者，对提升编程体验的一次探索。它目前可能还不完美，但这是一个开始。\n未来，我计划：\n\n开发配套的 IDEA 插件，让命名和注释功能无缝集成到你的开发环境中。\n引入更多的AI模型，提供更丰富的选择。\n探索“代码块重构”功能，对你已有的代码进行智能命名优化。\n\n这个工具是为我们开发者而生，也希望能由我们共同完善。\n在此，我诚挚地邀请每一位被“命名”困扰过的朋友，来体验一下我的这个小作品：\n点击这里访问：变量命名神器\n\n它完全免费，无需注册。如果你在使用过程中有任何建议或发现了Bug，都非常欢迎你向我反馈。让我们一起，用技术的力量，解决那些开发中的“小麻烦”，把更多的时间和精力，留给创造本身。\n感谢大家！\n","categories":["代码人生"],"tags":["变量命名","程序员工具","代码人生","AI工具"]},{"title":"介绍一款好用的变量命名网站","url":"/2025/05/21/%E4%BB%8B%E7%BB%8D%E4%B8%80%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%BD%91%E7%AB%99/","content":"前言大家好，今天我非常激动地向大家介绍我独立开发的一款网站，主要目的是为了解决程序员在开发过程中遇到的一个普遍痛点：变量命名。\n一个好的变量名不仅能让代码更易读，还能提高协作效率。希望我的这个小工具能帮助到大家。\n访问地址：https://www.icanshock.fun/\n主要功能网站目前主要提供以下几个核心功能：\n1. 变量命名这是最核心的功能。你可以输入变量的中文含义或者功能描述，网站会利用AI模型为你生成符合代码规范和语义的变量名。\n2. 变量批量命名当你需要一次性命名多个变量时，这个功能就派上用场了。你可以在输入框中一次性输入多个中文含义（每行一个），网站会为你批量生成对应的变量名，省去逐个命名的麻烦。\n3. AI模型配置为了保证命名结果的质量和灵活性，网站集成了多个强大的AI语言模型。目前支持：\n\nDeepSeek\n智谱AI (Zhipu AI)\n\n用户可以根据自己的需求和偏好，在设置中自由切换和配置所使用的模型。\n结语开发这个网站的初衷是为了解决我自己在编程时遇到的问题，现在我把它分享出来，希望能帮助到更多有同样困扰的开发者。\n欢迎大家体验和提出宝贵的意见！\n","categories":["代码人生"],"tags":["变量命名","程序员工具","代码人生","AI工具"]}]